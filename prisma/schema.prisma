generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  name              String
  email             String     @unique
  password          String
  cpf               String     @unique
  birthDate         DateTime
  gender            String
  createdAt         DateTime   @default(now())
  tickets           Ticket[]   @relation("UserTickets")
  transfers         Transfer[] @relation("TransfersOrigin")
  receivedTransfers Transfer[] @relation("TransfersDestination")
  orders            Order[]    @relation("UserOrders")
  organizedEvents   Event[]    @relation("OrganizerEvents")
  sessions          Session[]  @relation("UserSessions")
}

model Event {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  createdAt   DateTime     @default(now())
  organizerId Int
  categoryId  Int
  organizer   User         @relation("OrganizerEvents", fields: [organizerId], references: [id])
  tickets     Ticket[]     @relation("EventTickets")
  orders      Order[]
  category    Category     @relation(fields: [categoryId], references: [id])
  ticketTypes TicketType[] @relation("EventTicketTypes")
  images      Image[]
}

model Image {
  id      Int    @id @default(autoincrement())
  eventId Int
  event   Event  @relation(fields: [eventId], references: [id])
  type    String
  base64  String
}

model Ticket {
  id           Int        @id @default(autoincrement())
  qrCode       String
  ticketTypeId Int
  orderId      Int?
  userId       Int
  eventId      Int?
  validated    Boolean
  validatedAt  DateTime?
  validatedBy  Int?
  user         User       @relation("UserTickets", fields: [userId], references: [id])
  event        Event?     @relation("EventTickets", fields: [eventId], references: [id])
  order        Order?     @relation("OrderTickets", fields: [orderId], references: [id])
  ticketType   TicketType @relation("TicketTypeTickets", fields: [ticketTypeId], references: [id])
  transfers    Transfer[] @relation("TicketTransfers")
}

model TicketType {
  id                Int       @id @default(autoincrement())
  name              String
  totalQuantity     Int
  availableQuantity Int
  price             Float
  eventId           Int
  event             Event     @relation("EventTicketTypes", fields: [eventId], references: [id])
  tickets           Ticket[]  @relation("TicketTypeTickets")
  deletedAt         DateTime?
}

model Transfer {
  id                Int      @id @default(autoincrement())
  originUserId      Int
  destinationUserId Int
  ticketId          Int
  transferDate      DateTime
  originUser        User     @relation("TransfersOrigin", fields: [originUserId], references: [id])
  destinationUser   User     @relation("TransfersDestination", fields: [destinationUserId], references: [id])
  ticket            Ticket   @relation("TicketTransfers", fields: [ticketId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  totalAmount Float
  status      OrderStatus
  userId      Int
  eventId     Int
  user        User        @relation("UserOrders", fields: [userId], references: [id])
  event       Event       @relation(fields: [eventId], references: [id])
  tickets     Ticket[]    @relation("OrderTickets")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation("UserSessions", fields: [userId], references: [id])
  token     String // Adicionado campo token
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  events Event[]
}

enum TicketStatus {
  DISPONIVEL
  RESERVADO
  VENDIDO
}

enum OrderStatus {
  PENDENTE
  PAGO
  CANCELADO
}
